// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	//Client streaming
	TelemetryStream(ctx context.Context, opts ...grpc.CallOption) (TelemetryService_TelemetryStreamClient, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) TelemetryStream(ctx context.Context, opts ...grpc.CallOption) (TelemetryService_TelemetryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[0], "/telemetry_grpc.TelemetryService/TelemetryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceTelemetryStreamClient{stream}
	return x, nil
}

type TelemetryService_TelemetryStreamClient interface {
	Send(*TelemetryDataRequest) error
	CloseAndRecv() (*TelemetryDataResponse, error)
	grpc.ClientStream
}

type telemetryServiceTelemetryStreamClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceTelemetryStreamClient) Send(m *TelemetryDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telemetryServiceTelemetryStreamClient) CloseAndRecv() (*TelemetryDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TelemetryDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility
type TelemetryServiceServer interface {
	//Client streaming
	TelemetryStream(TelemetryService_TelemetryStreamServer) error
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (UnimplementedTelemetryServiceServer) TelemetryStream(TelemetryService_TelemetryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TelemetryStream not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_TelemetryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemetryServiceServer).TelemetryStream(&telemetryServiceTelemetryStreamServer{stream})
}

type TelemetryService_TelemetryStreamServer interface {
	SendAndClose(*TelemetryDataResponse) error
	Recv() (*TelemetryDataRequest, error)
	grpc.ServerStream
}

type telemetryServiceTelemetryStreamServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceTelemetryStreamServer) SendAndClose(m *TelemetryDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telemetryServiceTelemetryStreamServer) Recv() (*TelemetryDataRequest, error) {
	m := new(TelemetryDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry_grpc.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TelemetryStream",
			Handler:       _TelemetryService_TelemetryStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/telemetry.proto",
}
